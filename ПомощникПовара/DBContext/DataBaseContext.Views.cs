//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ПомощникПовара.DBContext.DataBaseContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsdd9b9906397da6e91f461b822a72c3a03c3c585133011610c82fbcd95374b5b9))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySetsdd9b9906397da6e91f461b822a72c3a03c3c585133011610c82fbcd95374b5b9 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "dd9b9906397da6e91f461b822a72c3a03c3c585133011610c82fbcd95374b5b9"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Extra")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Meal")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Product")
            {
                return GetView2();
            }

            if (extentName == "DataBaseContext.Extras")
            {
                return GetView3();
            }

            if (extentName == "DataBaseContext.Meal_Extras")
            {
                return GetView4();
            }

            if (extentName == "DataBaseContext.Meals")
            {
                return GetView5();
            }

            if (extentName == "DataBaseContext.Products")
            {
                return GetView6();
            }

            if (extentName == "DataBaseContext.Meal_Products")
            {
                return GetView7();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Extra.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Extra
        [CodeFirstDatabaseSchema.Extra](T3.Extra_Id, T3.Extra_Name, T3.[Extra.Meal_Id])
    FROM (
        SELECT T1.Extra_Id, T1.Extra_Name, T2.[Extra.Meal_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Extra_Id, 
                T.Name AS Extra_Name, 
                True AS _from0
            FROM DataBaseContext.Extras AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Meal_Extras_Target).Id AS Extra_Id, 
                Key(T.Meal_Extras_Source).Id AS [Extra.Meal_Id], 
                True AS _from1
            FROM DataBaseContext.Meal_Extras AS T) AS T2
            ON T1.Extra_Id = T2.Extra_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Meal.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Meal
        [CodeFirstDatabaseSchema.Meal](T1.Meal_Id, T1.Meal_Name, T1.Meal_IconSource)
    FROM (
        SELECT 
            T.Id AS Meal_Id, 
            T.Name AS Meal_Name, 
            T.IconSource AS Meal_IconSource, 
            True AS _from0
        FROM DataBaseContext.Meals AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Product.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Product
        [CodeFirstDatabaseSchema.Product](T3.Product_Id, T3.Product_Name, T3.Product_IconSource, T3.[Product.Meal_Id])
    FROM (
        SELECT T1.Product_Id, T1.Product_Name, T1.Product_IconSource, T2.[Product.Meal_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Product_Id, 
                T.Name AS Product_Name, 
                T.IconSource AS Product_IconSource, 
                True AS _from0
            FROM DataBaseContext.Products AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Meal_Products_Target).Id AS Product_Id, 
                Key(T.Meal_Products_Source).Id AS [Product.Meal_Id], 
                True AS _from1
            FROM DataBaseContext.Meal_Products AS T) AS T2
            ON T1.Product_Id = T2.Product_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DataBaseContext.Extras.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Extras
        [ПомощникПовара.DBContext.Extra](T1.Extra_Id, T1.Extra_Name) WITH 
        RELATIONSHIP(CREATEREF(DataBaseContext.Meals, ROW(T1.[Meal_Extras.Meal_Extras_Source.Id]),[ПомощникПовара.DBContext.Meal]),[ПомощникПовара.DBContext.Meal_Extras],Meal_Extras_Target,Meal_Extras_Source) 
    FROM (
        SELECT 
            T.Id AS Extra_Id, 
            T.Name AS Extra_Name, 
            True AS _from0, 
            T.Meal_Id AS [Meal_Extras.Meal_Extras_Source.Id]
        FROM CodeFirstDatabase.Extra AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataBaseContext.Meal_Extras.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Meal_Extras
        [ПомощникПовара.DBContext.Meal_Extras](T3.[Meal_Extras.Meal_Extras_Source], T3.[Meal_Extras.Meal_Extras_Target])
    FROM (
        SELECT -- Constructing Meal_Extras_Source
            CreateRef(DataBaseContext.Meals, row(T2.[Meal_Extras.Meal_Extras_Source.Id]), [ПомощникПовара.DBContext.Meal]) AS [Meal_Extras.Meal_Extras_Source], 
            T2.[Meal_Extras.Meal_Extras_Target]
        FROM (
            SELECT -- Constructing Meal_Extras_Target
                T1.[Meal_Extras.Meal_Extras_Source.Id], 
                CreateRef(DataBaseContext.Extras, row(T1.[Meal_Extras.Meal_Extras_Target.Id]), [ПомощникПовара.DBContext.Extra]) AS [Meal_Extras.Meal_Extras_Target]
            FROM (
                SELECT 
                    T.Meal_Id AS [Meal_Extras.Meal_Extras_Source.Id], 
                    T.Id AS [Meal_Extras.Meal_Extras_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Extra AS T
                WHERE T.Meal_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for DataBaseContext.Meals.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Meals
        [ПомощникПовара.DBContext.Meal](T1.Meal_Id, T1.Meal_Name, T1.Meal_IconSource)
    FROM (
        SELECT 
            T.Id AS Meal_Id, 
            T.Name AS Meal_Name, 
            T.IconSource AS Meal_IconSource, 
            True AS _from0
        FROM CodeFirstDatabase.Meal AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataBaseContext.Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Products
        [ПомощникПовара.DBContext.Product](T1.Product_Id, T1.Product_Name, T1.Product_IconSource) WITH 
        RELATIONSHIP(CREATEREF(DataBaseContext.Meals, ROW(T1.[Meal_Products.Meal_Products_Source.Id]),[ПомощникПовара.DBContext.Meal]),[ПомощникПовара.DBContext.Meal_Products],Meal_Products_Target,Meal_Products_Source) 
    FROM (
        SELECT 
            T.Id AS Product_Id, 
            T.Name AS Product_Name, 
            T.IconSource AS Product_IconSource, 
            True AS _from0, 
            T.Meal_Id AS [Meal_Products.Meal_Products_Source.Id]
        FROM CodeFirstDatabase.Product AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for DataBaseContext.Meal_Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Meal_Products
        [ПомощникПовара.DBContext.Meal_Products](T3.[Meal_Products.Meal_Products_Source], T3.[Meal_Products.Meal_Products_Target])
    FROM (
        SELECT -- Constructing Meal_Products_Source
            CreateRef(DataBaseContext.Meals, row(T2.[Meal_Products.Meal_Products_Source.Id]), [ПомощникПовара.DBContext.Meal]) AS [Meal_Products.Meal_Products_Source], 
            T2.[Meal_Products.Meal_Products_Target]
        FROM (
            SELECT -- Constructing Meal_Products_Target
                T1.[Meal_Products.Meal_Products_Source.Id], 
                CreateRef(DataBaseContext.Products, row(T1.[Meal_Products.Meal_Products_Target.Id]), [ПомощникПовара.DBContext.Product]) AS [Meal_Products.Meal_Products_Target]
            FROM (
                SELECT 
                    T.Meal_Id AS [Meal_Products.Meal_Products_Source.Id], 
                    T.Id AS [Meal_Products.Meal_Products_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Product AS T
                WHERE T.Meal_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
